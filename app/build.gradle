apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.appdistribution'
apply plugin: 'com.google.firebase.crashlytics'
apply from: '../tests.gradle'

android {
    compileSdkVersion compileVersion
    flavorDimensions "default"
    defaultConfig {
        applicationId "jp.co.soramitsu.adar"
        minSdkVersion minVersion
        targetSdkVersion targetVersion
        versionCode appVersionCode
        versionName appVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        signingConfig signingConfigs.debug
    }
    signingConfigs {
        cidebug {
            storeFile file(System.env.CI_KEYSTORE_PATH ?: "key.jks")
            storePassword System.env.CI_KEYSTORE_PASS ?: "password"
            keyAlias System.env.CI_KEYSTORE_KEY_ALIAS ?: "alias"
            keyPassword System.env.CI_KEYSTORE_KEY_PASS ?: "password"
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'proguard-rules-noobfuscation.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'proguard-rules-noobfuscation.pro'
            versionNameSuffix '-debug'
        }
        firebasedebug {
//            minifyEnabled true
//            shrinkResources true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            initWith debug
            matchingFallbacks = ['debug']
            versionNameSuffix '-firebase'
            signingConfig signingConfigs.cidebug
            //Init firebase
            def firebaseReleaseNotes = ''
            def firebaseGroup = ''
            if (System.getenv('CI_FIREBASE_RELEASENOTES') != null) {
                firebaseReleaseNotes = System.env.CI_FIREBASE_RELEASENOTES
            }
            if (System.getenv('CI_FIREBASE_GROUP') != null) {
                firebaseGroup = System.env.CI_FIREBASE_GROUP
            }
            firebaseAppDistribution {
                releaseNotes = firebaseReleaseNotes
                groups = firebaseGroup
            }

        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    buildFeatures {
        viewBinding true
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES', 'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/license.txt', 'META-INF/NOTICE', 'META-INF/NOTICE.txt', 'META-INF/notice.txt', 'META-INF/ASL2.0', 'META-INF/AL2.0', 'META-INF/LGPL2.1', 'META-INF/INDEX.LIST', 'META-INF/io.netty.versions.properties']
        }
    }


    productFlavors {
        develop {
            applicationIdSuffix ".develop"
            resValue "string", "app_name", "Adar Develop"
            dimension 'default'
            manifestPlaceholders.pathPrefix = "/dev/join"
            manifestPlaceholders.appIcon = "@mipmap/ic_adar_launcher"
            manifestPlaceholders.roundedIcon = "@mipmap/ic_adar_launcher_round"
        }

        adartestnet {
            applicationIdSuffix ".testnet"
            resValue "string", "app_name", "ADAR testnet"
            dimension 'default'
            manifestPlaceholders.pathPrefix = "/tst/join"
            manifestPlaceholders.appIcon = "@mipmap/ic_adar_launcher"
            manifestPlaceholders.roundedIcon = "@mipmap/ic_adar_launcher_round"
        }

        soralution {
            applicationIdSuffix ".communitytesting"
            resValue "string", "app_name", "Soralution"
            dimension 'default'
            manifestPlaceholders.pathPrefix = "/tst/join"
            manifestPlaceholders.appIcon = "@mipmap/ic_soralution_launcher"
            manifestPlaceholders.roundedIcon = "@mipmap/ic_soralution_launcher_rounded"
        }

        tsting {
            applicationIdSuffix ".stage"
            resValue "string", "app_name", "Adar Staging"
            dimension 'default'
            manifestPlaceholders.pathPrefix = "/stg/join"
            manifestPlaceholders.appIcon = "@mipmap/ic_launcher"
            manifestPlaceholders.roundedIcon = "@mipmap/ic_launcher_rounded"
        }

        production {
            resValue "string", "app_name", "Adar"
            dimension 'default'
            manifestPlaceholders.pathPrefix = "/join"
            manifestPlaceholders.appIcon = "@mipmap/ic_launcher"
            manifestPlaceholders.roundedIcon = "@mipmap/ic_launcher_rounded"
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = new File("Adar_" + variant.versionName + "_" + variant.flavorName + "_" + buildType.name + ".apk")
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(":core_di")
    implementation project(":common")
    implementation project(':core_db')
    implementation project(":feature_onboarding_api")
    implementation project(":feature_onboarding_impl")
    implementation project(":feature_main_api")
    implementation project(":feature_main_impl")
    implementation project(":feature_account_api")
    implementation project(":feature_account_impl")
    implementation project(':feature_ethereum_api')
    implementation project(':feature_ethereum_impl')
    implementation project(":feature_votable_api")
    implementation project(":feature_votable_impl")
    implementation project(":feature_wallet_api")
    implementation project(":feature_wallet_impl")
    implementation project(":feature_notification_api")
    implementation project(":feature_notification_impl")

    implementation kotlinDep

    implementation androidDep
    implementation materialDep
    implementation cardViewDep
    implementation constraintDep

    implementation navigationFragmentDep
    implementation navigationUiDep

    implementation neumorphismDep

    implementation lottieDep

    implementation loggerDep

    implementation daggerDep
    kapt daggerKapt

    implementation lifecycleDep
    kapt lifecycleKaptDep

    implementation coroutineAndroidDep
    implementation coroutineDep
    implementation coroutineTestDep

    implementation platform(firebaseBomDep)
    implementation firebaseMessagingDep
    implementation crashlyticsDep
    implementation googleAnalyticsDep

    implementation multidexDep

    //implementation irohaDep

    //implementation soraDep
    implementation novaCryptoDep
    implementation fearlessLibDep
    implementation webSocketLibDep

    implementation shimmerDep

    implementation zXingCoreDep
    implementation zXingEmbeddedDep

    implementation retrofitDep
    implementation gsonConvertedDep

    implementation (crashlyticsDep) {
        transitive = true
    }

    // Tests
    testImplementation jUnitDep
    testImplementation mockitoDep
    testImplementation robolectricDep
    testImplementation robolectricMultidexDep
    testImplementation archCoreTestDep
    testImplementation archFragmentTestDep
    testImplementation project(":test_shared")
}

apply plugin: 'com.google.gms.google-services'
